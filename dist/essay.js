(()=>{var t=t||{};t.EssayScore4LMS=function(e,n){"use strict";const i='<span class="h5p-essay-feedback-empty">...</span>';function s(t,e,i){if(!t)return;n.call(this,"essay"),this.params=s.extend({media:{},taskDescription:"",checkAnswer:"Check"},t),this.contentId=e,this.extras=i,console.log("*****************************hier1");const o=this.extras&&this.extras.metadata&&this.extras.metadata.defaultLanguage||"en";this.languageTag=s.formatLanguageCode(o),this.score=0,this.internalShowSolutionsCall=!1,void 0!==i&&void 0!==i.previousState&&(this.previousState=i.previousState),this.isAnswered=this.previousState&&this.previousState.inputField&&""!==this.previousState.inputField||!1,"object"==typeof this.previousState&&Object.keys(this.previousState).length&&this.updateScore()}return s.prototype=Object.create(n.prototype),s.prototype.constructor=s,s.prototype.registerDomElements=function(){const e=this,n=this.params.media?this.params.media.type:void 0;if(n&&n.library){const t=n.library.split(" ")[0];"H5P.Image"===t?n.params.file&&this.setImage(n.params.file.path,{disableImageZooming:this.params.media.disableImageZooming,alt:n.params.alt,title:n.params.title}):"H5P.Video"===t?n.params.sources&&this.setVideo(n):"H5P.Audio"===t&&n.params.files&&this.setAudio(n)}this.inputField=new t.EssayScore4LMS.InputField({taskDescription:this.params.taskDescription,previousState:this.previousState},{onInteracted:function(t){e.handleInteracted(t)},onInput:function(){e.handleInput()}}),this.setViewState(this.previousState&&this.previousState.viewState||"task"),"results"===this.viewState?t.externalDispatcher.on("initialized",(function(){e.handleCheckAnswer({skipXAPI:!0})})):"solutions"===this.viewState&&t.externalDispatcher.on("initialized",(function(){e.handleCheckAnswer({skipXAPI:!0}),e.showSolutions()})),this.content=this.inputField.getContent(),this.setContent(this.content),this.addButtons()},s.prototype.addButtons=function(){const t=this;t.addButton("check-answer",t.params.checkAnswer,(function(){t.handleCheckAnswer()}))},s.prototype.handleCheckAnswer=function(t){const e=this;t=s.extend({skipXAPI:!1},t),e.setViewState("results"),e.inputField.disable(),e.isAnswered=!0,e.handleEvaluation(t),e.hideButton("check-answer")},s.prototype.getInput=function(t){t=t||" ";let e="";return this.inputField?e=this.inputField.getText():this.previousState&&this.previousState.inputField&&(e=this.previousState.inputField),e.replace(/(\r\n|\r|\n)/g,t).replace(/\s\s/g," ")},s.prototype.handleInteracted=function(t){t=t||{},this.isAnswered=this.isAnswered||this.inputField.getText().length>0,this.triggerXAPI("interacted")},s.prototype.getAnswerGiven=function(){return this.isAnswered},s.prototype.getScore=function(){return Math.round(this.score)},s.prototype.showSolutions=function(){this.setViewState("solutions"),this.inputField.disable(),this.hideButton("show-solution"),this.internalShowSolutionsCall||(this.hideButton("check-answer"),this.hideButton("try-again")),this.trigger("resize")},s.prototype.resetTask=function(){this.setViewState("task"),this.setExplanation(),this.removeFeedback(),this.hideSolution(),this.hideButton("show-solution"),this.hideButton("try-again"),this.inputField.enable(),this.inputField.focus(),this.isAnswered=!1},s.prototype.getXAPIData=function(){return{statement:this.getXAPIAnswerEvent().data.statement}},s.prototype.isPassed=function(){return!0},s.prototype.handleEvaluation=function(t){t=s.extend({skipXAPI:!1},t);const e=this.computeResults();this.buildExplanation(e),t.skipXAPI||this.handleXAPI(),this.trigger("resize")},s.prototype.buildSolution=function(){const t=document.createElement("div");t.classList.add("h5p-essay-solution-container"),this.solutionAnnouncer=document.createElement("div"),this.solutionAnnouncer.setAttribute("tabindex","0"),this.solutionAnnouncer.addEventListener("focus",(function(t){t.target.blur(),t.target.setAttribute("tabindex","-1")})),t.appendChild(this.solutionAnnouncer);const e=document.createElement("div");return e.classList.add(SOLUTION_SAMPLE),t.appendChild(e),t},s.prototype.hideSolution=function(){null!==this.solution.parentNode&&this.solution.parentNode.removeChild(this.solution)},s.prototype.computeResults=function(){return[]},s.prototype.computeScore=function(t){return 0},s.prototype.buildExplanation=function(t){const e=[];return e.length>0&&e.sort((function(t,e){return t.correct===i&&e.correct!==i})),e},s.prototype.handleButtons=function(t){},s.prototype.handleXAPI=function(){this.trigger(this.getXAPIAnswerEvent()),this.trigger(this.createEssayXAPIEvent("passed"))},s.prototype.createEssayXAPIEvent=function(t){const e=this.createXAPIEventTemplate(t);return s.extend(e.getVerifiedStatementValue(["object","definition"]),this.getxAPIDefinition()),e},s.prototype.getxAPIDefinition=function(){const t={name:{}};return t.name[this.languageTag]=this.getTitle(),t.name["en-US"]=t.name[this.languageTag],t.description={},t.description[this.languageTag]=this.params.taskDescription+s.FILL_IN_PLACEHOLDER,t.description["en-US"]=t.description[this.languageTag],t.type="http://id.tincanapi.com/activitytype/essay",t.interactionType="long-fill-in",console.log("getxAPIDefinition"),console.log(t),t},s.prototype.getXAPIAnswerEvent=function(){const t=this.createEssayXAPIEvent("answered");return t.setScoredResult(this.getScore(),this.getScore(),this,!0,this.isPassed()),t.data.statement.result.response=this.inputField.getText(),console.log("getXAPIAnswerEvent"),console.log(t),console.log("**************************"),t},s.prototype.detectExactMatches=function(e,n){const i=[];let o=-1,r=0;for(e=e.replace(/\*/,"").replace(new RegExp(s.REGULAR_EXPRESSION_ASTERISK,"g"),"*");-1!==(o=n.indexOf(e))&&""!==e;)t.TextUtilities.isIsolated(e,n)&&i.push({keyword:e,match:e,index:r+o}),r+=o+e.length,n=n.substr(o+e.length);return i},s.prototype.detectWildcardMatches=function(e,n,i){if(-1===e.indexOf("*"))return[];e=e.replace(/[*]{2,}/g,"*"),["\\",".","[","]","?","+","(",")","{","}","|","!","^","-"].forEach((function(t){e=e.split(t).join("\\"+t)}));const o=new RegExp(e.replace(/\*/g,s.CHARS_WILDCARD+"+"),this.getRegExpModifiers(i)),r=[];let a;for(;null!==(a=o.exec(n));)t.TextUtilities.isIsolated(a[0],n,{index:a.index})&&r.push({keyword:e,match:a[0],index:a.index});return r},s.prototype.detectFuzzyMatches=function(e,n){const i=[];for(let s=-2;s<=2;s++)for(let o=0;o<n.length;o++){const r=n.substr(o,e.length+s);t.TextUtilities.areSimilar(e,r)&&t.TextUtilities.isIsolated(r,n,{index:o})&&(this.contains(i,o)||i.push({keyword:e,match:r,index:o}))}return i},s.prototype.getRegExpAlternatives=function(t,e,n){const i=this;return t.filter((function(t){return"/"===t[0]&&"/"===t[t.length-1]})).map((function(t){const s=new RegExp(t.slice(1,-1),i.getRegExpModifiers(n));return e.match(s)})).reduce((function(t,e){return t.concat(e)}),[]).filter((function(t){return null!==t}))},s.prototype.getRegExpModifiers=function(t){const e=["g"];return t||e.push("i"),e.join("")},s.prototype.mergeMatches=function(){if(0===arguments.length)return[];if(1===arguments.length)return arguments[0];const t=(arguments[0]||[]).slice();for(let e=1;e<arguments.length;e++){const n=arguments[e]||[];for(let e=0;e<n.length;e++)this.contains(t,n[e].index)||t.push(n[e])}return t.sort((function(t,e){return t.index>e.index}))},s.prototype.contains=function(t,e){return t.some((function(t){return Math.abs(t.index-e)<=t.match.length}))},s.extend=function(){for(let t=1;t<arguments.length;t++)for(let e in arguments[t])Object.prototype.hasOwnProperty.call(arguments[t],e)&&("object"==typeof arguments[0][e]&&"object"==typeof arguments[t][e]?this.extend(arguments[0][e],arguments[t][e]):arguments[0][e]=arguments[t][e]);return arguments[0]},s.prototype.getTitle=function(){let e;return this.extras.metadata&&(e=this.extras.metadata.title),e=e||s.DEFAULT_DESCRIPTION,t.createTitle(e)},s.formatLanguageCode=function(t){if("string"!=typeof t)return t;const e=t.split("-");return e[0]=e[0].toLowerCase(),e.length>1&&(e[1]=e[1].toUpperCase()),e.join("-")},s.prototype.htmlDecode=function(t){return(new DOMParser).parseFromString(t,"text/html").documentElement.textContent},s.prototype.getCurrentState=function(){if(this.inputField)return{inputField:this.inputField.getText(),viewState:this.viewState}},s.prototype.setViewState=function(t){-1!==s.VIEW_STATES.indexOf(t)&&(this.viewState=t)},s.CHARS_WILDCARD="[A-zÀ-ÖØ-öø-ÿͰ-ϿЀ-ӿ぀-ゟ぀-ヿ一-拿挀-矿砀-賿贀-鿿฀-๿]",s.FILL_IN_PLACEHOLDER="__________",s.DEFAULT_DESCRIPTION="EssayScore4LMS",s.REGULAR_EXPRESSION_ASTERISK=":::H5P-EssayScore4LMS-REGEXP-ASTERISK:::",s.VIEW_STATES=["task","results","solutions"],s}(t.jQuery,t.Question)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,