(()=>{"use strict";H5P.EventDispatcher,H5P.jQuery,H5P.JoubelUI;const t=H5P.Question,e=(H5P.shuffleArray,"h5p-essay-input-field-message-char-important"),i="h5p-essay-input-field-message-save-animation";class n{constructor(t,e){var i=this;this.params=t,this.previousState=t.previousState||"",this.callbacks=e||{},this.callbacks.onInteracted=this.callbacks.onInteracted||function(){},this.params.taskDescription=this.params.taskDescription||"",this.taskDescription=document.createElement("div"),this.taskDescription.classList.add("h5p-essay-input-field-label"),this.taskDescription.innerHTML=this.params.taskDescription,this.inputField=document.createElement("textarea"),this.inputField.classList.add("h5p-essay-input-field-textfield"),this.setText(this.previousState),this.oldValue=this.previousState,this.containsText=this.oldValue.length>0,this.inputField.addEventListener("blur",(function(){i.oldValue!==i.getText()&&i.callbacks.onInteracted({updateScore:!0}),i.oldValue=i.getText()})),this.inputField.addEventListener("input",(function(){(i.containsText&&0===i.getText().length||!i.containsText&&i.getText().length>0)&&i.callbacks.onInteracted(),i.containsText=i.getText().length>0})),this.content=document.createElement("div"),this.content.appendChild(this.inputField),this.container=document.createElement("div"),this.container.classList.add("h5p-essay-input-field"),this.container.appendChild(this.taskDescription),this.container.appendChild(this.content)}getIntroduction(){return this.taskDescription}getContent(){return this.content}getText(){return this.inputField.value}disable(){this.inputField.disabled=!0}enable(){this.inputField.disabled=!1}focus(){this.inputField.focus()}setText(t){void 0!==t&&("string"==typeof t&&(this.inputField.innerHTML=t),"object"!=typeof t||Array.isArray(t)||(this.inputField.innerHTML=t.inputField||""))}updateMessageChars(){}updateMessageSaved(t){void 0===t||""===t?this.statusSaved.classList.remove(i):this.statusSaved.classList.add(i),this.statusSaved.innerHTML=t}setMessageChars(t,i){"string"==typeof t&&("&nbsp;"===t||i?this.statusChars.removeAttribute("tabindex"):this.statusChars.setAttribute("tabindex",0),this.statusChars.innerHTML=t,i?this.statusChars.classList.add(e):this.statusChars.classList.remove(e))}}const s=function(){const e='<span class="h5p-essay-feedback-empty">...</span>';function i(e,n,s){if(!e)return;t.call(this,"essay"),this.params=i.extend({media:{},taskDescription:"",checkAnswer:"Check"},e),this.contentId=n,this.extras=s,console.log("*****************************hier1");const o=this.extras&&this.extras.metadata&&this.extras.metadata.defaultLanguage||"en";this.languageTag=i.formatLanguageCode(o),this.score=0,this.internalShowSolutionsCall=!1,void 0!==s&&void 0!==s.previousState&&(this.previousState=s.previousState),this.isAnswered=this.previousState&&this.previousState.inputField&&""!==this.previousState.inputField||!1,"object"==typeof this.previousState&&Object.keys(this.previousState).length&&this.updateScore()}return i.prototype=Object.create(t.prototype),i.prototype.constructor=i,i.prototype.registerDomElements=function(){const t=this,e=this.params.media?this.params.media.type:void 0;if(e&&e.library){const t=e.library.split(" ")[0];"H5P.Image"===t?e.params.file&&this.setImage(e.params.file.path,{disableImageZooming:this.params.media.disableImageZooming,alt:e.params.alt,title:e.params.title}):"H5P.Video"===t?e.params.sources&&this.setVideo(e):"H5P.Audio"===t&&e.params.files&&this.setAudio(e)}this.inputField=new n({taskDescription:this.params.taskDescription,previousState:this.previousState},{onInteracted:function(e){t.handleInteracted(e)},onInput:function(){t.handleInput()}}),this.setViewState(this.previousState&&this.previousState.viewState||"task"),"results"===this.viewState?H5P.externalDispatcher.on("initialized",(function(){t.handleCheckAnswer({skipXAPI:!0})})):"solutions"===this.viewState&&H5P.externalDispatcher.on("initialized",(function(){t.handleCheckAnswer({skipXAPI:!0}),t.showSolutions()})),this.content=this.inputField.getContent(),this.setContent(this.content),this.addButtons()},i.prototype.addButtons=function(){const t=this;t.addButton("check-answer",t.params.checkAnswer,(function(){t.handleCheckAnswer()}))},i.prototype.handleCheckAnswer=function(t){const e=this;t=i.extend({skipXAPI:!1},t),e.setViewState("results"),e.inputField.disable(),e.isAnswered=!0,e.handleEvaluation(t),e.hideButton("check-answer")},i.prototype.getInput=function(t){t=t||" ";let e="";return this.inputField?e=this.inputField.getText():this.previousState&&this.previousState.inputField&&(e=this.previousState.inputField),e.replace(/(\r\n|\r|\n)/g,t).replace(/\s\s/g," ")},i.prototype.handleInteracted=function(t){t=t||{},this.isAnswered=this.isAnswered||this.inputField.getText().length>0,this.triggerXAPI("interacted")},i.prototype.getAnswerGiven=function(){return this.isAnswered},i.prototype.getScore=function(){return Math.round(this.score)},i.prototype.showSolutions=function(){this.setViewState("solutions"),this.inputField.disable(),this.hideButton("show-solution"),this.internalShowSolutionsCall||(this.hideButton("check-answer"),this.hideButton("try-again")),this.trigger("resize")},i.prototype.resetTask=function(){this.setViewState("task"),this.setExplanation(),this.removeFeedback(),this.hideSolution(),this.hideButton("show-solution"),this.hideButton("try-again"),this.inputField.enable(),this.inputField.focus(),this.isAnswered=!1},i.prototype.getXAPIData=function(){return{statement:this.getXAPIAnswerEvent().data.statement}},i.prototype.isPassed=function(){return!0},i.prototype.handleEvaluation=function(t){t=i.extend({skipXAPI:!1},t);const e=this.computeResults();this.buildExplanation(e),t.skipXAPI||this.handleXAPI(),this.trigger("resize")},i.prototype.buildSolution=function(){const t=document.createElement("div");t.classList.add("h5p-essay-solution-container"),this.solutionAnnouncer=document.createElement("div"),this.solutionAnnouncer.setAttribute("tabindex","0"),this.solutionAnnouncer.addEventListener("focus",(function(t){t.target.blur(),t.target.setAttribute("tabindex","-1")})),t.appendChild(this.solutionAnnouncer);const e=document.createElement("div");return e.classList.add(SOLUTION_SAMPLE),t.appendChild(e),t},i.prototype.hideSolution=function(){null!==this.solution.parentNode&&this.solution.parentNode.removeChild(this.solution)},i.prototype.computeResults=function(){return[]},i.prototype.computeScore=function(t){return 0},i.prototype.buildExplanation=function(t){const i=[];return i.length>0&&i.sort((function(t,i){return t.correct===e&&i.correct!==e})),i},i.prototype.handleButtons=function(t){},i.prototype.handleXAPI=function(){this.trigger(this.getXAPIAnswerEvent()),this.trigger(this.createEssayXAPIEvent("passed"))},i.prototype.createEssayXAPIEvent=function(t){const e=this.createXAPIEventTemplate(t);return i.extend(e.getVerifiedStatementValue(["object","definition"]),this.getxAPIDefinition()),e},i.prototype.getxAPIDefinition=function(){const t={name:{}};return t.name[this.languageTag]=this.getTitle(),t.name["en-US"]=t.name[this.languageTag],t.description={},t.description[this.languageTag]=this.params.taskDescription+i.FILL_IN_PLACEHOLDER,t.description["en-US"]=t.description[this.languageTag],t.type="http://id.tincanapi.com/activitytype/essay",t.interactionType="long-fill-in",console.log("getxAPIDefinition"),console.log(t),t},i.prototype.getXAPIAnswerEvent=function(){const t=this.createEssayXAPIEvent("answered");return t.setScoredResult(this.getScore(),this.getScore(),this,!0,this.isPassed()),t.data.statement.result.response=this.inputField.getText(),console.log("getXAPIAnswerEvent"),console.log(t),console.log("**************************"),t},i.prototype.detectExactMatches=function(t,e){const n=[];let s=-1,o=0;for(t=t.replace(/\*/,"").replace(new RegExp(i.REGULAR_EXPRESSION_ASTERISK,"g"),"*");-1!==(s=e.indexOf(t))&&""!==t;)H5P.TextUtilities.isIsolated(t,e)&&n.push({keyword:t,match:t,index:o+s}),o+=s+t.length,e=e.substr(s+t.length);return n},i.prototype.detectWildcardMatches=function(t,e,n){if(-1===t.indexOf("*"))return[];t=t.replace(/[*]{2,}/g,"*"),["\\",".","[","]","?","+","(",")","{","}","|","!","^","-"].forEach((function(e){t=t.split(e).join("\\"+e)}));const s=new RegExp(t.replace(/\*/g,i.CHARS_WILDCARD+"+"),this.getRegExpModifiers(n)),o=[];let a;for(;null!==(a=s.exec(e));)H5P.TextUtilities.isIsolated(a[0],e,{index:a.index})&&o.push({keyword:t,match:a[0],index:a.index});return o},i.prototype.detectFuzzyMatches=function(t,e){const i=[];for(let n=-2;n<=2;n++)for(let s=0;s<e.length;s++){const o=e.substr(s,t.length+n);H5P.TextUtilities.areSimilar(t,o)&&H5P.TextUtilities.isIsolated(o,e,{index:s})&&(this.contains(i,s)||i.push({keyword:t,match:o,index:s}))}return i},i.prototype.getRegExpAlternatives=function(t,e,i){const n=this;return t.filter((function(t){return"/"===t[0]&&"/"===t[t.length-1]})).map((function(t){const s=new RegExp(t.slice(1,-1),n.getRegExpModifiers(i));return e.match(s)})).reduce((function(t,e){return t.concat(e)}),[]).filter((function(t){return null!==t}))},i.prototype.getRegExpModifiers=function(t){const e=["g"];return t||e.push("i"),e.join("")},i.prototype.mergeMatches=function(){if(0===arguments.length)return[];if(1===arguments.length)return arguments[0];const t=(arguments[0]||[]).slice();for(let e=1;e<arguments.length;e++){const i=arguments[e]||[];for(let e=0;e<i.length;e++)this.contains(t,i[e].index)||t.push(i[e])}return t.sort((function(t,e){return t.index>e.index}))},i.prototype.contains=function(t,e){return t.some((function(t){return Math.abs(t.index-e)<=t.match.length}))},i.extend=function(){for(let t=1;t<arguments.length;t++)for(let e in arguments[t])Object.prototype.hasOwnProperty.call(arguments[t],e)&&("object"==typeof arguments[0][e]&&"object"==typeof arguments[t][e]?this.extend(arguments[0][e],arguments[t][e]):arguments[0][e]=arguments[t][e]);return arguments[0]},i.prototype.getTitle=function(){let t;return this.extras.metadata&&(t=this.extras.metadata.title),t=t||i.DEFAULT_DESCRIPTION,H5P.createTitle(t)},i.formatLanguageCode=function(t){if("string"!=typeof t)return t;const e=t.split("-");return e[0]=e[0].toLowerCase(),e.length>1&&(e[1]=e[1].toUpperCase()),e.join("-")},i.prototype.htmlDecode=function(t){return(new DOMParser).parseFromString(t,"text/html").documentElement.textContent},i.prototype.getCurrentState=function(){if(this.inputField)return{inputField:this.inputField.getText(),viewState:this.viewState}},i.prototype.setViewState=function(t){-1!==i.VIEW_STATES.indexOf(t)&&(this.viewState=t)},i.CHARS_WILDCARD="[A-zÀ-ÖØ-öø-ÿͰ-ϿЀ-ӿ぀-ゟ぀-ヿ一-拿挀-矿砀-賿贀-鿿฀-๿]",i.FILL_IN_PLACEHOLDER="__________",i.DEFAULT_DESCRIPTION="EssayScore4LMS",i.REGULAR_EXPRESSION_ASTERISK=":::H5P-EssayScore4LMS-REGEXP-ASTERISK:::",i.VIEW_STATES=["task","results","solutions"],i}();H5P=H5P||{},H5P.EssayScore4LMS=s})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,